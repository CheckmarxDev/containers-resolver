apiVersion: ast.checkmarx.com/v1
kind: Microservice
metadata:
  name: {{ include "get-fullname" (list . "containers-worker") }}
  labels: {{- include "containers.labels" . | nindent 4 }}


spec:
  component: {{ .Values.name | quote }}

  image:
    registry: checkmarx.jfrog.io/ast-docker
    name: containers-worker
    pullPolicy: IfNotPresent # Overrides the image tag whose default is the chart appVersion.
    tag: {{ .Values.containers_worker.image.tag | quote }}
    imagePullSecrets: [ ]

  scale:
    static:
      count: {{ default .Values.component.replicaCount .Values.containers_worker.scale.replicaCount }}
    auto:
      enabled: {{ .Values.containers_worker.scale.autoscaling.enabled | default false }}
      minReplicas: {{ .Values.containers_worker.scale.autoscaling.minReplicas | default "1"}}
      maxReplicas: {{ .Values.containers_worker.scale.autoscaling.maxReplicas | default "20"}}
      targetCPUUtilizationPercentage: {{ .Values.containers_worker.scale.autoscaling.targetCPUUtilizationPercentage | default "70"}}
      targetMemoryUtilizationPercentage: {{ .Values.containers_worker.scale.autoscaling.targetMemoryUtilizationPercentage | default "70"}}

  envirmentVariablesUnencrypted:
    # new scan worker config
    - key: CONTAINERS_NEW_SCAN_JOB_TYPE
      value: {{ printf "containers-scan-initiator-%s" .Release.Namespace }}
    - key: CONTAINERS_NEW_SCAN_TIMEOUT_IN_MINUTES
      value: "3"
    - key: CONTAINERS_NEW_SCAN_MAX_CONCURRENT_JOBS
      value: "10"
    - key: CONTAINERS_NEW_SCAN_RETURN_JOB_TIMEOUT_IN_MINUTES
      value: "3"
    # scan status worker config
    - key: CONTAINERS_SCAN_STATUS_JOB_TYPE
      value: {{ printf "containers-scan-status-%s" .Release.Namespace }}
    - key: CONTAINERS_SCAN_STATUS_TIMEOUT_IN_MINUTES
      value: "2"
    - key: CONTAINERS_SCAN_STATUS_MAX_CONCURRENT_JOBS
      value: "10"
    - key: CONTAINERS_SCAN_STATUS_RETURN_JOB_TIMEOUT_IN_MINUTES
      value: "0"
    # ports
    - key: SCAN_STATUS_SERVICE_PORT
      value: {{ .Values.containers_worker.scanStatusPort}}
    - key: HEALTH_SERVICE_PORT
      value: "80"
    # container engine rabbitMq config
    - key: CONTAINERS_RABBIT_EXCHANGE_TOPIC
      value: "containers.topic"
    - key: CONTAINERS_RABBIT_INITIALIZE_SCAN_QUEUE
      value: "initialize-scan"
    - key: CONTAINERS_RABBIT_ROUTING_KEY
      value: "containers.scan.initialize-scan"
    - key: CONTAINERS_RABBIT_RECONNECT_RETRIES
      value: "25"
    - key: CONTAINERS_RABBIT_RETRY_WAIT_DURATION
      value: "3000000000"

  persistent:
    redis:
      enabled: true
      envirmentVariablesMap:
        isCluster: "REDIS_IS_CLUSTER_MODE"
        address: "REDIS_ADDRESS"
        password: "REDIS_PASSWORD"
        tls:
          enabled: "REDIS_TLS_ENABLED"

  workflow:
    zeebe:
      enabled: true
      envirmentVariablesMap:
        address: "WORKFLOW_ZEEBE_BROKER_ADDRESS"
        authServerURL: "WORKFLOW_ZEEBE_AUTH_SERVER_URL"
        clientId: "WORKFLOW_ZEEBE_AUTH_CLIENT_ID"
        clientSecret: "WORKFLOW_ZEEBE_AUTH_CLIENT_SECRET"
        tls:
          enabled: "WORKFLOW_ZEEBE_TLS_ENABLE"
          skipVerify: ""
          caPath: "WORKFLOW_ZEEBE_TLS_CA_PATH"

  messaging:
    rabbitMQ:
      enabled: true
      envirmentVariablesMap:
        tls:
          enabled: ""
          skipVerify: "RABBIT_TLS_SKIP_VERIFY"
        uri: "RABBIT_CONNECTION_STRING" # https://www.rabbitmq.com/uri-query-parameters.html

  internalNetworking:
    addionalServiceName: {{ .Values.containers_worker.discovryName | quote }}
    ports:
      - port: 80
        name: "rest"
      - port: {{ .Values.containers_worker.scanStatusPort }}
        name: "scans-status"

  core:
    scans:
      enabled: true
      envirmentVariablesMap:
        grpcProjects:
          hostAndPort: "PROJECTS_ENDPOINT"
    repostore:
      enabled: true
      envirmentVariablesMap:
        grpc:
          hostAndPort: "REPOSTORE_GRPC_ADDRESS"

  livenessProbe:
    enabled: true
    type: "httpGet"
    httpGet:
      path: "/health"
      port: 80
  readinessProbe:
    enabled: true
    type: "httpGet"
    httpGet:
      path: "/health"
      port: 80

  {{- if .Values.production }}
  resources:
    requests:
      cpu: {{ .Values.containers_worker.resources.requests.cpu }}
      memory: {{ .Values.containers_worker.resources.requests.memory }}
    limits:
      cpu: {{ .Values.containers_worker.resources.limits.cpu }}
      memory: {{ .Values.containers_worker.resources.limits.memory }}
  {{- end }}


